I don't think you understand what you are saying yourself. Your linux machine has some posix standard headers which are written in C. open() is a function found there. Internally the implementation of that function would most likely use a system call. – 
DeiDei
 Oct 8, 2016 at 1:35
1
open() is both a system call and a function in the C library. That's how you call system calls. Every system call is a function, but not every function is a system call. – 
user207421
 Oct 8, 2016 at 1:39
Oh, thank you! So, the C library did not define open() but fopen(), and fopen() will call open()? – 
Tianyi
 Oct 8, 2016 at 1:44
3
To be accurate, open() is a very thin wrapper around the actual system call, which is a bunch of pushes or register loads and then a machine instruction. These wrappers are provided so you can avoid the ugliness and use C syntax. – 
user207421
 Oct 8, 2016 at 1:55
1
+1 for @user207421's first comment helping me understand "The technique used on UNIX systems is for each system call to have a function of the same name in the standard C library" from APUE. Many thanks :) – 
Rick
 Feb 20, 2019 at 13:16 
Show 2 more comments
3 Answers
SortedHighest score (default)
13

EJP's comments to the question and Steve Summit's answer are exactly to the point: open() is both a syscall and a function in the standard C library; fopen() is a function in the standard C library, that sets up a file handle -- a data structure of type FILE that contains additional stuff like optional buff.